graphdrop --all

# Import the YAML file.
import $WORK/test.yaml

report

# Test_Selects
graphq $WORK/match_selects.cyp 1 '{"mi_name":"fmu_inst", "selector_name":"channel", "selector_value":"signal_vector", "sg_name":"VARIABLES"}'
graphq $WORK/match_selects.cyp 1 '{"mi_name":"fmu_inst", "selector_name":"channel", "selector_value":"network_vector", "sg_name":"BINARY_VARIABLES"}'
graphq $WORK/match_instanceOf.cyp 1 '{"mi_name":"fmu_inst", "model_name":"FMIMCL"}'


# Test Selects Relationship.

-- test.yaml --
---
kind: SignalGroup
metadata:
  name: VARIABLES
  labels:
    model: fmu_inst
    channel: signal_vector
---
kind: SignalGroup
metadata:
  name: BINARY_VARIABLES
  labels:
    model: fmu_inst
    channel: network_vector
---
kind: Model
metadata:
    name: FMIMCL
spec:
  channels:
    - alias: signal_channel
      selectors:
        channel: signal_vector
    - alias: network_channel
      selectors:
        channel: network_vector
---
kind: Stack
metadata:
  name: stack
spec:
  models:
    - name: fmu_inst
      uid: 42
      model:
        name: FMIMCL
      metadata:
        network: stub
      channels:
        - name: signal
          alias: signal_channel
          selectors:
            channel: signal_vector 
        - name: network
          alias: network_channel
          selectors:
            channel: network_vector

-- match_selects.cyp --
MATCH (mi:ModelInst {name: $mi_name})-[:Has]->(sel:Selector {selectorName: $selector_name, selectorValue: $selector_value})
MATCH (sel)-[:Selects]->(l:Label {label_name: $selector_name, label_value: $selector_value})
MATCH (l)<-[:Has]-(sig:SignalGroup {signalgroup_name: $sg_name})
RETURN mi, sel, l, sig

-- match_instanceOf.cyp --
MATCH (mi:ModelInst {name: $mi_name})-[:InstanceOf]->(m:Model {name: $model_name})
RETURN mi, m
