/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 0.1.dev1+g32ca81e Thu Dec 12 04:52:57 2024.
 */

#ifndef GRAPH_INTERNAL_PKG_FILE_KIND_TESTDATA_BRAKE_BY_WIRE_NETWORKS_VEHICLE_VEHICLE_H_
#define GRAPH_INTERNAL_PKG_FILE_KIND_TESTDATA_BRAKE_BY_WIRE_NETWORKS_VEHICLE_VEHICLE_H_

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define VEHICLE_ENGINE_STATUS_FRAME_ID (0x190u)

/* Frame lengths in bytes. */
#define VEHICLE_ENGINE_STATUS_LENGTH (2u)

/* Extended or standard frame types. */
#define VEHICLE_ENGINE_STATUS_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define VEHICLE_ENGINE_STATUS_CYCLE_TIME_MS (20u)

/* Signal choices. */


/* Frame Names. */
#define VEHICLE_ENGINE_STATUS_NAME "EngineStatus"

/* Signal Names. */
#define VEHICLE_ENGINE_STATUS_CHECK_ENGINE_SET_NAME "CheckEngineSet"
#define VEHICLE_ENGINE_STATUS_CHECK_ENGINE_CLEAR_NAME "CheckEngineClear"

/**
 * Signals in message EngineStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct vehicle_engine_status_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t check_engine_set;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t check_engine_clear;
};

/**
 * Pack message EngineStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int vehicle_engine_status_pack(
    uint8_t *dst_p,
    const struct vehicle_engine_status_t *src_p,
    size_t size);

/**
 * Unpack message EngineStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_engine_status_unpack(
    struct vehicle_engine_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from EngineStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int vehicle_engine_status_init(struct vehicle_engine_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t vehicle_engine_status_check_engine_set_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_engine_status_check_engine_set_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_engine_status_check_engine_set_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t vehicle_engine_status_check_engine_clear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double vehicle_engine_status_check_engine_clear_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool vehicle_engine_status_check_engine_clear_is_in_range(int8_t value);


#ifdef __cplusplus
}
#endif

#endif  // GRAPH_INTERNAL_PKG_FILE_KIND_TESTDATA_BRAKE_BY_WIRE_NETWORKS_VEHICLE_VEHICLE_H_
